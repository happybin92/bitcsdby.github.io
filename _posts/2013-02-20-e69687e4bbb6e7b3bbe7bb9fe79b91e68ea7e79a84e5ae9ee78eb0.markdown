---
author: bydiao
comments: true
date: 2013-02-20 12:00:43+00:00
layout: post
slug: '%e6%96%87%e4%bb%b6%e7%b3%bb%e7%bb%9f%e7%9b%91%e6%8e%a7%e7%9a%84%e5%ae%9e%e7%8e%b0'
title: 文件系统监控的实现
wordpress_id: 50
categories:
- .NET&amp;Windows编程
tags:
- .NET&amp;Windows编程
---

智能实验箱可视化与控制软件已经有了一个稳定版本。最近又要加入一些新功能。简单描述如下：
1.软件通过命令行启动指定IAR工程。
2.IAR编译生成bin文件后，触发软件，提示用户是否对单片机进行烧写。

IAR命令行操作暂且不提，单说生成新的bin后如何触发软件，提示用户重新烧写。一句话:就是实现文件系统的监控。

.net下，如果对监控实时性要求不高的话，用System.IO.FileSystemWatcher类完全可以实现。

FileSystemWatcher可实现对指定文件夹或文件的监控，当文件夹或文件发生Changed，Created，Renamed，Deleted等事件时，FileSystemWatcher对象会触发相应的事件函数。

以下举例说明: 监控一个.net工程的bin/release文件夹
首先定义一个FileSystemWatcher对象，并实现delete和created事件函数。
为将变化的文件显示在listview中，定义一个更行UI的委托。
[code lang="csharp"]
	public delegate void filecchanged(FileSystemEventArgs e);//用户更新UI的委托
        FileSystemWatcher fsw = new FileSystemWatcher("UpdateBin/bin/Release");//定义一个对象

        private void setLogText(FileSystemEventArgs e)
        {
            listView1.ItemsSource = null;
            listView1.ItemsSource = lt; //这两行动态更新listview中绑定的数据
        }

        //定义fsw的delete事件函数
        private void delete(object sender, FileSystemEventArgs e)
        {
            /*
            ListViewItem lvi = new ListViewItem();
            lvi.SubItems.Add(e.Name);
            lvi.SubItems.Add(e.ChangeType.ToString());
            lvi.SubItems.Add(e.FullPath);
            */
            //listView1.Items.Add(lvi);

            lt.Add(new info() { name = e.Name, type = e.ChangeType.ToString(), path = e.FullPath });

            //由于FileSystemWatcher是在独立线程中运行的，所以不能在该线程中访问listview，为更新UI界面，用委托实现
            if (!Dispatcher.CheckAccess())
            {
                Dispatcher.Invoke(new filecchanged(setLogText), e);
                return;
            }
        }

        //定义fsw的create事件函数
        private void create(object sender, FileSystemEventArgs e)
        {
            lt.Add(new info() { name = e.Name, type = e.ChangeType.ToString(), path = e.FullPath });

            if (!Dispatcher.CheckAccess())
            {
                Dispatcher.Invoke(new filecchanged(setLogText), e);
                return;
            }
        }[/code]
点击“启动监控”按钮后，触发绑定delete和create函数，同时启动监控。
[code lang="csharp"]
	private void button1_Click(object sender, RoutedEventArgs e)
        {
            if (fsw.EnableRaisingEvents == false)
            {
                fsw.Created += new FileSystemEventHandler(this.create);
                fsw.Deleted += new FileSystemEventHandler(this.delete);
                fsw.EnableRaisingEvents = true;
            }
        }
[/code]

以上代码就可以实现对一个文件夹的监控。实现rename等监控与上述方法类似。
具体可见以下链接:
http://blog.csdn.net/czw2010/article/details/7916262
如何绑定listview数据，见其他文档。
