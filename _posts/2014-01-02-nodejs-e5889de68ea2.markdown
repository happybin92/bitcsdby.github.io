---
author: bydiao
comments: true
date: 2014-01-02 02:52:03+00:00
layout: post
slug: nodejs-%e5%88%9d%e6%8e%a2
title: node.js 初探
wordpress_id: 591
categories:
- 技术杂汇
tags:
- node.js
---

node.js这个词已经在很多场合听说过，并未深究。昨天和同学聊起它在高并发web响应上的优势，决定花时间初探一下。

**node.js的基本概况：**

node.js是js的一个运行环境，主要针对高并发web设计，不适用于处理cpu密集计算。这就是我对node.js最粗略的认识，下面是一些引文，介绍了node.js的详细概况。

[原文](http://www.ibm.com/developerworks/cn/opensource/os-nodejs/)
“

Node 公开宣称的目标是 “旨在提供一种简单的构建可伸缩网络程序的方法”。当前的服务器程序有什么问题？我们来做个数学题。在 Java™ 和 PHP 这类语言中，每个连接都会生成一个新线程，每个新线程可能需要 2 MB 的配套内存。在一个拥有 8 GB RAM 的系统上，理论上最大的并发连接数量是 4,000 个用户。随着您的客户群的增长，如果希望您的 Web 应用程序支持更多用户，那么，您必须添加更多服务器。当然，这会增加服务器成本、流量成本和人工成本等成本。除这些成本上升外，还有一个潜在技术问题，即用户可能针对每个请求使用不同的服务器，因此，任何共享资源都必须在所有服务器之间共享。鉴于上述所有原因，整个 Web 应用程序架构（包括流量、处理器速度和内存速度）中的瓶颈是：服务器能够处理的并发连接的最大数量。

Node 解决这个问题的方法是：更改连接到服务器的方式。每个连接发射一个在 Node 引擎的进程中运行的事件，而不是为每个连接生成一个新的 OS 线程（并为其分配一些配套内存）。Node 声称它绝不会死锁，因为它根本不允许使用锁，它不会直接阻塞 I/O 调用。Node 还宣称，运行它的服务器能支持数万个并发连接。

”

**node.js在windows下的配置**

node.js 官网 [http://nodejs.org/industry/](http://nodejs.org/industry/)可以下载到三大主流操作系统的安装包，安装后，可以通过npm来进一步安装node.js需要的模块。

目前非常流行的一些 NPM 模块有：[原文](http://blog.jobbole.com/53736/)



	
  * express– Express.js,是一个简洁而灵活的 node.js Web应用框架, 并且已经是现在大多数 Node.js 应用的标准框架，你已经可以在很多 Node.js 的书籍中看到它了。

	
  * connect– Connect 是一个 Node.js 的 HTTP 服务拓展框架，提供一个高性能的“插件”集合，以中间件闻名，是 Express 的基础部分之一。

	
  * socket.io 和 sockjs – 目前服务端最流行的两个 websocket 组件。

	
  * Jade – 流行的模板引擎之一，并且是 Express.js 的默认模板引擎。其灵感来源于 HAML。

	
  * mongo 和 mongojs – 封装了 MongoDB 的的各种 API，不过笔者平常工作用的是 mongoose 也很推荐。

	
  * redis – Redis 的客户端函数库.

	
  * coffee-script – CoffeeScript 编译器，允许开发者使用 Coffee 来编写他们的 Node.js 程序。

	
  * underscore (lodash, lazy) – 最流行的 JavaScript 工具库 , 用于 Node.js 的封装包，以及两个采取略有不同的实现方法来获得更好性能的同行。

	
  * forever – 可能是用来确保 node 脚本持续运行的最流行的工具。


在cmd下通过npm install [pkgname]可以安装相应模块，express，jade，redis一般是需要的。
为使安装后命令可全局使用，可用 npm install [pkgname] -g 来安装。
![](http://i.imgur.com/TRLh4oh.png)

安装后，都会存放到node_modules文件夹下，

![](http://i.imgur.com/fuocjlD.png)

**firstDemo**
第一个demo，用express搭一个最简单的服务器



	
  * 创建工程，express [projname]


![](http://i.imgur.com/zUCEzLw.png)
会自动在nodejs目录下生成工程目录



	
  * 复制node_modules文件夹到工程目录

	
  * 创建nodejs文件，代码如下


[code lang="js"]
var http = require("http");
http.createServer(function(request, response) {  
    response.writeHead(200, {"Content-Type": "text/plain"});  
    response.write("Hello World");  
    response.end();
}).listen(8888);
console.log("nodejs start listen 8888 port!");
[/code]
即建立一个http服务器，端口8888

浏览器访问127.0.0.1:8888及返回hello world
![](http://i.imgur.com/wgQ4sa1.png)
测试成功！

nodejs开发环境建立完成，后面有时间可以尝试一下其他高级demo

2014年开篇博客，希望今年深度带动广度，多积累，多学习，多交流。
