---
author: bydiao
comments: true
date: 2013-04-22 06:16:35+00:00
layout: post
slug: net%e5%8f%8d%e5%b0%84%e6%8a%80%e6%9c%af%e5%88%9d%e6%8e%a2
title: .NET反射技术初探
wordpress_id: 323
categories:
- .NET&amp;Windows编程
tags:
- .net framework
- WPF
---

好久没写日志了，最近的精力都放在了几个大作业和一两篇读不懂的论文上，剩下的零散时间全部被羽毛球填满。关于打羽毛球的体会，我会在接下来的日志中体现。真是一项魅力运动。

回到主题，可视化软件最近有了动态添加实验的需求。说到本质，就是要在WPF中动态添加样式不同的Page。调研并与师兄讨论后，决定用.net的反射技术来做。按照金旭亮的说法，所谓反射技术，就是在程序运行的时候，动态识别程序集中的信息，动态创建对象并引用方法的技术。

按照这个思路，要在WPF中动态添加样式不同的Page，首先要对Page进行标准化，把相同的部分固定，不同的部分做成不同的控件，编译成dll，供程序运行时动态加载。动态添加Page的方法日后再说，在此重要说明如何生成控件dll，如何通过反射技术动态生成dll中的控件对象，如何调用控件中的方法，主程序如何与控件通信等。

1.wpf创建控件dll

vs2010，创建wpf用户控件库，然后就是熟悉的xaml+cs的编程模型，做出自己想要的控件即可，编译生成dll

2.创建dll中的对象

（1）创建一个控件对象
[code lang="csharp"]
//加载控件库
Assembly ass = Assembly.LoadFrom("WpfControlLibrary1.dll");
//创建指定类型的对象
object obj = ass.CreateInstance("WpfControlLibrary1.UserControl1");
[/code]

（2）将控件对象加载到UI界面
[code lang="csharp"]
canvas.Children.Add(obj as UIElement);                
canvas.RegisterName("newobj", obj);
[/code]
这里的canvas是容器控件，grid，panel等均可

这样，就会在界面上看到设计的控件UI了。

(3)调用控件库中的方法
控件加载到主程序UI界面后，所有控件内部的逻辑都可以正常执行。主程序想调用控件中的方法，实现主程序与控件的通信，可以如下实现：

[code lang="csharp"]
//获取控件类型
Type typ = obj.GetType();
//获取类方法
MethodInfo mi = typ.GetMethod("getstring"); //方法的名称

//通过返回值和传递参数可实现主程序与UI控件的通信。
string str = mi.Invoke(obj, null) as string;
//MessageBox.Show(str + " dd" + mi.Name);
[/code]

这样一个控件
如图所示
![](http://i.imgur.com/EKf807l.jpg)
右边的编辑框是写在一个dll中的，可以通过主程序中的get，set设置和获取编辑框中的内容。
