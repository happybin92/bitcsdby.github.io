---
author: bydiao
comments: true
date: 2013-03-28 15:23:53+00:00
layout: post
slug: net%e4%b8%8b%e5%ae%9e%e7%8e%b0%e7%bd%91%e7%bb%9c%e8%b0%83%e8%af%95%e5%8a%a9%e6%89%8b
title: .Net下实现网络调试助手
wordpress_id: 261
categories:
- .NET&amp;Windows编程
tags:
- .net framework
- WPF
- 控件使用
- 窗口通信
---

实验箱要添加扩展实验，核心是一个类似网络调试助手的功能，有了这个，所有新加入的节点都可以抽象为一个TCP server，与之通信即可。

今晚实现了一个网络调试助手，其间涉及以下内容，总结一下，留待以后查阅。

1.IP MASK控件的实现
    首先必须吐槽一下百度和CSDN，搜了那么久都没有一个真正的wpf下实现的ip mask，CSDN上的资源明明说是wpf下的ipmask，下载之后，还是winform的，上传者有没有节操？
    所以决定，原理百度，做一个绿色程序员。
    google下键入wpf ip mask，资源无数，随便点开两个，耐心看一下英文讲解，就可以实现wpf下的ipmask，确实没有想象的那么简单，实现起来还需要注意很多东西。具体代码有需要的可以邮件联系。
2.textBox控件应用集锦
    TextBox控件是wpf下比较常用的数据输入输出控件，现对基本总结如下：
实现自动换行,可修改TextWrapping 属性
实现滚动条，可以修改VerticalScrollBarVisibility 属性

[code lang="xml"]
<TextBox TextWrapping="Wrap" VerticalScrollBarVisibility="Auto" 
         Height="357" HorizontalAlignment="Left" Margin="265,20,0,0" 
         Name="textBox_rec" VerticalAlignment="Top" Width="459" Grid.Column="1" 
/>
[/code]

对输入的字符进行限制，可实现PreviewKeyDown消息函数，例如让一个编辑框只能输入16进制的字符，空格和退格键，可以如下实现。
[code lang="csharp"]
private void textBox1_PreviewKeyDown(object sender, KeyEventArgs e)
{
     base.OnKeyDown(e);
     Key[] Valid = new Key[] { Key.A, Key.B, Key.C, Key.D, Key.E, Key.F, Key.D1, Key.D2, Key.D3, 
                                      Key.D4, Key.D5, Key.D6, Key.D7, Key.D8, Key.D9, Key.D0,Key.Space,Key.Delete,Key.Back};
     //MessageBox.Show(e.Key.ToString());
     foreach (Key k in Valid)
     {
          if (e.Key == k)
              return;
     }

     //e.Handled属性设置为true，则不再对此按键输出
     e.Handled = true;  
}
[/code]

3.字符串操作小节
  byte[]与string的相互转换，进制转换等
  字符串操作是任何程序中都避免不了的，.net对字符串操作的封装做的很全面，但感觉没有python用着顺手。
  涉及到网络编程，最常见的就是byte[]与string之间的转换，总结如下
byte到string的转换
[code lang="csharp"]
string str = "1f2c2c2aaaccff";
byte[] b = new byte[] { 0x01, 0x02, 0x03, 0x04, 0xFF, 0xFE };

string s = BitConverter.ToString(b).Replace('-',' ');
[/code]
主要用到BitConverter类，其中定义了很多静态函数可以不用实例化调用。
[code lang="csharp"]
public static string BitConverter.ToString(
	byte[] value
)
[/code]
也可用Convert类，一个一个字节的转换，指定基为2,10,16等。
[code lang="csharp"]
public static string ToString(
	byte value,
	int toBase
)
[/code]
byte[]到string，无论用到什么类，终归会用到.ToString()函数。主要用到将网络流数据转为一个字符串。

这里提到的是将byte转化为可显示的string，string显示出来的内容和byte[]中的一致，但编码是不相等的，如果要编码值不变到原生转换，则需要用到Encoding类
[code lang="csharp"]
Encoding.xxx.GetString(byte[]);//byte 1就是string中的1，而不会转为可显示的'1'
[/code]
string到byte[]的转换略为复杂，主要是将本地字符串作为网络流数据发送。

[code lang="csharp"]
string str = "1f2c2c2aaaccff";
byte[] b = new byte[] { 0x01, 0x02, 0x03, 0x04, 0xFF, 0xFE };

foreach (byte a in Encoding.Default.GetBytes(str))
{
         Console.Write(a);
         Console.Write(" ");
}
[/code]
输出结果为'1''f'等的ASCII码值，如果string中就是要传输的内容，这种方法就可以了，转为byte[]，发送即可。
但如果string中存的是16进制的数，例如str中，实际要表达的是'1f','2c','2c'等16进制的byte，这转化起来就有些难度了。
偶得一行大神的代码，将此问题解决
[code lang="csharp"]
byte[] b_send = System.Text.RegularExpressions.Regex.Split
                        (send, @"(\w{2})").Where(t => t.Trim() != "").Select(t => Convert.ToByte(t, 16)).ToArray();
[/code]
这行代码的意思，就是用正则表达式，将string send切割成长度为2的string，Where筛选掉只有空格的串，再将其与的转为16进制byte，最后将结果合并为一个大数组即可。其中最核心的是正则表达式和Convert.ToByte()函数
[code lang="csharp"]
public static byte ToByte(
	string value,
	int fromBase
)
[/code]
总结一下，string向byte[]转换，最后都要落到GetBytes()或者ToByte()，主要用到的还是Encoding和Convert类。

4.线程与UI
对于线程的使用一直不是很熟练，这次尝试用线程访问UI控件，确实比用UI线程内的定时器效率高，至少不会有卡顿现象。跨线程访问UI，将当前Page的指针传给线程即可通过Invoke，BeginInvoke等调用UI方法。（Invoke和BeginInvoke的区别要深入讨论一下）
[code lang="csharp"]
static System.Threading.ParameterizedThreadStart ParStart = new System.Threading.ParameterizedThreadStart(tcp_rec_Refresh);
System.Threading.Thread TcpRec;

static void tcp_rec_Refresh(object ParObject);//其中的ParObject可以为Page的对象
[/code]
5.DispatcherTimer和Timer的区别
相同点：
都是定时执行任务的计时器，都可以使用。（废话）
不同点：
Timer运行在非UI 线程，如果Timer需要更新UI的时候，需要调用 Invoke或者 BeginInvoke，且interval时间内没执行完的内容会被挂起，立即执行下一个时间点触发的程序。如果执行时间大于interval，会有很多被挂起的触发。
DispatcherTimer运行在UI 线程，处理的 Dispatcher 队列中的计时器，可以直接更新UI，隔一个interval就会向消息队列中插入一个触发，然后等着消息队列轮到自己执行的时候执行。执行多久都可以。所以经常会造成UI的卡顿。
写实验箱的时候用到了这两种定时器，对其理解逐渐加深，DispatcherTimer的interval不能太小，Timer中尽量别处理太耗时的计算。

带着脑子编程，一定能从一些小问题上悟出一些新的方法。勤于码耕！
