---
author: bydiao
comments: true
date: 2013-02-22 09:23:45+00:00
layout: post
slug: '%e5%8f%aa%e8%bf%90%e8%a1%8c%e4%b8%80%e4%b8%aa%e7%a8%8b%e5%ba%8f%e5%ae%9e%e4%be%8b%e7%9a%84%e5%ae%9e%e7%8e%b0'
title: 只运行一个程序实例的实现
wordpress_id: 110
categories:
- .NET&amp;Windows编程
tags: [Windows编程&.NET]
---

很多程序由于内部逻辑复杂，或者用到很多其他资源，不能同时开启多个实例。这就需要在程序初始化的时候，判断是否已经有程序实例在执行。这应该是程序设计的一个经典问题，有多种实现方法。

1.最朴素的方法
看到这个问题，我最初的想法就是在程序初始化的时候，获取进程列表，然后循环判断，是否存在一个id和当前进程不同，但进程名相同的进程实例在运行。如果有，则说明当前进程为后来者，提示并退出。如果没有，则继续启动程序。
网上有很多代码，下面的代码是网上找的，自己没有验证。

<code lang="csharp">
	public static Process GetRunningInstance()
	{
		Process currentProcess = Process.GetCurrentProcess(); //获取当前进程
		//获取当前运行程序完全限定名
		string currentFileName = currentProcess.MainModule.FileName;
		//获取进程名为ProcessName的Process数组。
		Process[] processes = Process.GetProcessesByName(currentProcess.ProcessName);
		//遍历有相同进程名称正在运行的进程
		foreach (Process process in processes)
		{
			if (process.MainModule.FileName == currentFileName)
			{
				if (process.Id != currentProcess.Id) //根据进程ID排除当前进程
			return process;//返回已运行的进程实例
			}
		}
		return null;
	}
</code>

这个方法过于复杂，而且是通过可执行程序的完整路径匹配，如果在不同路径下启动相同程序，则会同时启动多个实例。

2.基于互斥量的方法
基于互斥量的方法简单且好理解。主要用到System.Threading.Mutex类，学名叫：同步基元，其实就是操作系统中的互斥量的概念。这类变量以一个字符串作为键，不会存在相同键的互斥量。有一个活着的变量，再申请一个同名变量就会失败。用这个思路，就可以实现功能。
具体实现代码如下：

<code lang="csharp">
	public static bool CreateMutex(string name) 
	{ 
        bool result = false; 
        mutex = new Mutex(true, name, out result); 
        return result; 
	} 

	public static void ReleaseMutex() 
	{	 
        if (mutex != null) 
        { 
                mutex.Close(); 
        } 
	} 
</code>

在wpf主窗口 初始化函数中，加入以下代码：

<code lang="csharp">
	if (!CreateMutex()) 
	{ 
        MessageBox.Show("程序已经运行！"); 
        System.Environment.Exit(System.Environment.ExitCode);     
	} 
</code>

同时，在App xaml中可以实现Application_Exit函数，在函数中释放变量即可。

<code lang="csharp">
	ReleaseMutex(); 
</code>

方法2运行成功，而且简单易懂。另发现，需要在程序生命周期最后执行的语句，可以放在Application_Exit 
