---
author: bydiao
comments: true
date: 2013-03-02 06:07:11+00:00
layout: post
slug: '%e8%bd%ac%e8%87%aa%e9%85%b7%e5%a3%b3%e4%b8%80%e4%b8%aafork%e7%9a%84%e9%9d%a2%e8%af%95%e9%a2%98'
title: 一个fork的面试题
wordpress_id: 131
categories:
- 面试题
tags:[面试题]
---

题目：请问以下代码会输出多少个"-"
<code>
	#include <stdio.h>
	#include <sys/types.h>
	#include <unistd.h>
 
	int main(void)
	{
   		int i;
   		for(i=0; i<2; i++){
	      	fork();
	      	printf("-");	
   		}
 
   		return 0;
	}
</code>

此题看似简单，第一感觉会认为输出6个"-"，酷壳说最终会输出8个"-",自己写了个程序，确实输出了8个。
具体原理如下：

1.fork()的基本原理。
fork()函数在Linux下主要用于创建子进程
需要引用

<code>
	#include<unistd.h>
	#include<sys/types.h>
</code>

函数声明为

<code>
	pid_t fork( void);
</code>

在主进程中一次调用fork(),会返回两个函数，一个是主函数，返回值为子进程pid，一个是子进程，返回值为0，所以fork()的一般编程结构如下：

<code>
	if(fork() == 0)
	{
		//子进程
	}
	else
	{
		//父进程
	}
</code>

如果按这种思路，本题最终会输出6个"-"，但printf函数又另有玄机。

2.printf()缓冲
printf函数有自己的缓冲区，并不一定是调用一次printf函数，就会实时的输出内容。例如以下语句：

<code>
	printf("-");
</code>

printf()函数就会将"-"放入缓冲区中，并不会立即输出。
而fork()函数调用时，回复制一个完整的进程空间作为子进程，当然也包括了printf()缓冲区，所以在i=1时再调用fork()生成的子进程，最终也会输出两个"-"，这样一共4个进程，8个"-"。
如果加入\n，或者主动清空缓冲区，就不会出现8个的情况了。

<code>
	printf("-\n");
	//or
	printf("-");
	fflussh(stdout);
</code>

详细讲解请参看酷壳博客
[http://coolshell.cn/articles/7965.html#more-7965](http://coolshell.cn/articles/7965.html#more-7965)
